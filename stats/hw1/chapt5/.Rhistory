# === Fit skewed t using fGarch ===
data(CPSch3, package = "Ecdat")
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
fit <- sstdFit(male.earnings, hessian = TRUE)
library("fGarch")
# === Fit skewed t using fGarch ===
data(CPSch3, package = "Ecdat")
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
fit <- sstdFit(male.earnings, hessian = TRUE)
# === Extract fitted parameters ===
params <- fit$fit$par
mu <- params["mean"]
sigma <- params["sd"]
nu <- params["shape"]
xi <- params["skew"]
# === Define skewed Student-t density (as used in fGarch) ===
dsstd <- function(x, mean, sd, nu, xi) {
s <- sqrt(2 / (xi + 1 / xi))
z <- (x - mean) / sd
z_scaled <- z * s
density <- dt(z_scaled, df = nu)
cdf <- pt(xi * z_scaled, df = nu)
(2 / sd) * density * cdf
}
# === Plot empirical and fitted densities ===
d <- density(male.earnings)
plot(d,
main = "Empirical vs Fitted Skewed t (fGarch)",
xlab = "Earnings", lwd = 2, col = "black")
lines(d$x, dsstd(d$x, mean = mu, sd = sigma, nu = nu, xi = xi),
col = "blue", lwd = 2)
library("fGarch")
fit <- sstdFit(male.earnings, hessian = TRUE)
params <- fit$fit$par
mu    <- as.numeric(params["mean"])
sigma <- as.numeric(params["sd"])
nu    <- as.numeric(params["shape"])
xi    <- as.numeric(params["skew"])
params
params <- fit$fit$par
mu <- params["mean"]
sigma <- params["sd"]
nu <- params["shape"]
xi <- params["skew"]
fit$fit$par
library("fGarch")
fit <- sstdFit(male.earnings, hessian = TRUE)
getAnywhere(sstdFit)
# 1. Fit using fGarch::sstdFit()
data(CPSch3, package = "Ecdat")
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
fit <- fGarch::sstdFit(male.earnings, hessian = TRUE)
# 2. Extract parameters
params <- fit$estimate
mu    <- as.numeric(params["mean"])
sigma <- as.numeric(params["sd"])
nu    <- as.numeric(params["nu"])
xi    <- as.numeric(params["xi"])
# 3. Define the skewed Student-t density manually
dsstd <- function(x, mean, sd, nu, xi) {
s <- sqrt(2 / (xi + 1 / xi))
z <- (x - mean) / sd
z_scaled <- z * s
density <- dt(z_scaled, df = nu)
cdf <- pt(xi * z_scaled, df = nu)
(2 / sd) * density * cdf
}
# 4. Plot
d <- density(male.earnings)
plot(d,
main = "Empirical vs Fitted Skewed t (fGarch::sstdFit)",
xlab = "Earnings", lwd = 2, col = "black")
lines(d$x, dsstd(d$x, mean = mu, sd = sigma, nu = nu, xi = xi),
col = "blue", lwd = 2)
legend("topright",
legend = c("Empirical density", "Fitted skewed t"),
col = c("black", "blue"), lty = 1, lwd = 2, bty = "n")
# Load the required package
library(fGarch)
data(CPSch3, package = "Ecdat")
# Prepare male earnings data
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
# Fit the skewed Student's t-distribution
fit <- sstdFit(male.earnings, hessian = TRUE)
params <- fit$estimate
# Extract parameters
mu    <- as.numeric(params["mean"])
sigma <- as.numeric(params["sd"])
nu    <- as.numeric(params["nu"])
xi    <- as.numeric(params["xi"])
# Create x values over a reasonable range
x_vals <- seq(min(male.earnings), max(male.earnings), length.out = 500)
# Compute fitted density using fGarch's dsstd()
fitted_density <- dsstd(x_vals, mean = mu, sd = sigma, nu = nu, xi = xi)
# Plot the empirical density
d <- density(male.earnings)
plot(d,
main = "Empirical vs Fitted Skewed t (fGarch)",
xlab = "Earnings", lwd = 2, col = "black", ylim = range(c(d$y, fitted_density)))
# Add fitted density
lines(x_vals, fitted_density, col = "blue", lwd = 2)
# Legend
legend("topright",
legend = c("Empirical density", "Fitted skewed t (fGarch)"),
col = c("black", "blue"), lty = 1, lwd = 2, bty = "n")
install.packages("skewt")  # if not already installed
library(skewt)
install.packages("skewt")  # if not already installed
library(skewt)
install.packages("skewt")  # if not already installed
library(skewt)
data(CPSch3, package = "Ecdat")
library(fGarch)
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
fit <- sstdFit(male.earnings, hessian = TRUE)
params <- fit$estimate
mu    <- as.numeric(params["mean"])
sigma <- as.numeric(params["sd"])
nu    <- as.numeric(params["nu"])
xi    <- as.numeric(params["xi"])
# Create grid
x_vals <- seq(min(male.earnings), max(male.earnings), length.out = 500)
# Compute fitted density using skewt::dskewt (type = 1)
fitted_density <- dskewt(x_vals, df = nu, gamma = xi, location = mu, scale = sigma, type = 1)
install.packages("skewt")  # Run this once
library(skewt)
?dst  # should open the help page
install.packages("sn")  # if not already installed
library(sn)
dst(x, dp = c(mu, sigma, alpha, nu))
library(sn)
# Prepare data
data(CPSch3, package = "Ecdat")
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
# Fit skewed t-distribution
fit <- st.mle(y = male.earnings)
install.packages("sn")
library(sn)
# Step 1: Prepare the data
data(CPSch3, package = "Ecdat")
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
# Step 2: Fit skewed t-distribution via MLE
fit <- st.mle(y = male.earnings)
# Fit skewed t using selm()
fit <- selm(male.earnings ~ 1, family = "ST")
# Extract estimated parameters
dp <- coef(fit, "DP")  # Direct parameters: location, scale, alpha (skew), df
# Plot
d <- density(male.earnings)
x_vals <- d$x
y_fitted <- dst(x_vals, dp = dp)
plot(d, main = "Empirical vs Fitted Skewed t (sn::selm)",
xlab = "Earnings", lwd = 2, col = "black")
lines(x_vals, y_fitted, col = "blue", lwd = 2)
legend("topright",
legend = c("Empirical", "Fitted skewed t"),
col = c("black", "blue"), lty = 1, lwd = 2, bty = "n")
# === Reproducible setup summary ===
cat("R version: ", R.version.string, "\n")
cat("sn package version: ", as.character(packageVersion("sn")), "\n")
cat("Fitting method: selm(male.earnings ~ 1, family = 'ST') from sn\n")
cat("Density evaluated with: dst(x_vals, dp = coef(fit, 'DP'))\n")
cat("Plot generated using base R: plot(), lines(), legend()\n")
# Load required package
library(fGarch)
data(CPSch3, package = "Ecdat")
# Prepare data: male earnings
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
# === Fitting: skewed Student's t ===
fit <- sstdFit(male.earnings, hessian = TRUE)
# Extract fitted parameters
params <- fit$estimate
mu    <- as.numeric(params["mean"])
sigma <- as.numeric(params["sd"])
nu    <- as.numeric(params["nu"])
xi    <- as.numeric(params["xi"])
# === Plotting ===
# Empirical density
d <- density(male.earnings)
x_vals <- d$x
# Fitted density using fGarch's dsstd()
fitted <- dsstd(x_vals, mean = mu, sd = sigma, nu = nu, xi = xi)
# Plot
plot(d,
main = "Empirical vs Fitted Skewed t (fGarch)",
xlab = "Earnings", lwd = 2, col = "black",
ylim = range(c(d$y, fitted)))
lines(x_vals, fitted, col = "blue", lwd = 2)
legend("topright",
legend = c("Empirical density", "Fitted skewed t (fGarch)"),
col = c("black", "blue"), lty = 1, lwd = 2, bty = "n")
# Extract and print the fitted parameters
params <- fit$estimate
cat("Parameters used for dsstd() (fGarch skewed t):\n")
cat(sprintf("  Mean (mu)   : %.10f\n", params["mean"]))
cat(sprintf("  SD (sigma)  : %.10f\n", params["sd"]))
cat(sprintf("  DF (nu)     : %.10f\n", params["nu"]))
cat(sprintf("  Skew (xi)   : %.10f\n", params["xi"]))
# Fit skewed t using selm()
fit <- selm(male.earnings ~ 1, family = "ST")
# Extract estimated parameters
dp <- coef(fit, "DP")  # Direct parameters: location, scale, alpha (skew), df
# Plot
d <- density(male.earnings)
x_vals <- d$x
y_fitted <- dst(x_vals, dp = dp)
plot(d, main = "Empirical vs Fitted Skewed t (sn::selm)",
xlab = "Earnings", lwd = 2, col = "black")
lines(x_vals, y_fitted, col = "blue", lwd = 2)
legend("topright",
legend = c("Empirical", "Fitted skewed t"),
col = c("black", "blue"), lty = 1, lwd = 2, bty = "n")
dp <- coef(fit, "DP")
dp
# sn::selm fit parameters
mu     <- 8.539163
sigma  <- 11.248639
alpha  <- 3.392678
nu     <- 37.854591
# Convert alpha to fgarch's xi
delta <- alpha / sqrt(1 + alpha^2)
xi_fgarch <- sqrt((1 + delta) / (1 - delta))
xi_fgarch
library(fGarch)
x_vals <- seq(min(male.earnings), max(male.earnings), length.out = 500)
fitted_fgarch <- dsstd(x_vals, mean = mu, sd = sigma, nu = nu, xi = xi_fgarch)
lines(x_vals, fitted_fgarch, col = "red", lwd = 2, lty = 2)
legend("topright",
legend = c("Empirical", "sn::selm", "fGarch (converted)"),
col = c("black", "blue", "red"), lty = c(1, 1, 2), lwd = 2, bty = "n")
library(fGarch)
fit_fgarch <- sstdFit(
male.earnings,
start = list(mean = mu, sd = sigma, nu = nu, xi = xi_fgarch),
hessian = TRUE
)
library(fGarch)
data(CPSch3, package = "Ecdat")
# 1. Extract data
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
# 2. Set your desired starting values
mu     <- 8.539163
sigma  <- 11.248639
nu     <- 37.854591
alpha  <- 3.392678
# Convert alpha to fGarch-style xi
delta <- alpha / sqrt(1 + alpha^2)
xi <- sqrt((1 + delta) / (1 - delta))
start_vals <- c(mean = mu, sd = sigma, nu = nu, xi = xi)
# 3. Define log-likelihood function
loglik <- function(par, x) {
mu <- par[1]
sigma <- par[2]
nu <- par[3]
xi <- par[4]
-sum(log(dsstd(x, mean = mu, sd = sigma, nu = nu, xi = xi)))
}
# 4. Fit using nlminb (or optim if preferred)
fit <- nlminb(start = start_vals, objective = loglik, x = male.earnings)
# 5. Print fitted parameters
fitted_params <- fit$par
cat(sprintf("mean = %.6f\n", fitted_params[1]))
cat(sprintf("sd   = %.6f\n", fitted_params[2]))
cat(sprintf("nu   = %.6f\n", fitted_params[3]))
cat(sprintf("xi   = %.6f\n", fitted_params[4]))
# Load packages
library(fGarch)
data(CPSch3, package = "Ecdat")
# Step 1: Prepare data
male.earnings <- na.omit(as.numeric(CPSch3[CPSch3[, 3] == "male", 2]))
# Step 2: Initial parameters from sn::selm fit
mu     <- 8.539163
sigma  <- 11.248639
alpha  <- 3.392678
nu     <- 37.854591
# Step 3: Convert alpha (sn) → xi (fGarch)
delta <- alpha / sqrt(1 + alpha^2)
xi <- sqrt((1 + delta) / (1 - delta))  # ≈ 1.6497
# Step 4: Fit log-likelihood manually
loglik <- function(par, x) {
mu <- par[1]
sigma <- par[2]
nu <- par[3]
xi <- par[4]
-sum(log(dsstd(x, mean = mu, sd = sigma, nu = nu, xi = xi)))
}
start_vals <- c(mu, sigma, nu, xi)
fit <- nlminb(start = start_vals, objective = loglik, x = male.earnings)
params <- fit$par
names(params) <- c("mean", "sd", "nu", "xi")
# Step 5: Plotting
x_vals <- seq(min(male.earnings), max(male.earnings), length.out = 500)
fitted_density <- dsstd(x_vals,
mean = params["mean"],
sd = params["sd"],
nu = params["nu"],
xi = params["xi"])
# Empirical density
emp_density <- density(male.earnings)
# Plot
plot(emp_density,
main = "Empirical vs Fitted Skewed t (fGarch + selm init)",
xlab = "Earnings", lwd = 2, col = "black",
ylim = range(c(emp_density$y, fitted_density)))
lines(x_vals, fitted_density, col = "blue", lwd = 2)
legend("topright",
legend = c("Empirical", "Fitted skewed t (fGarch)"),
col = c("black", "blue"), lty = 1, lwd = 2, bty = "n")
# Optional: Print final parameters
cat(sprintf("Final fitted parameters (fGarch-style):\n"))
cat(sprintf("  mean  = %.6f\n", params["mean"]))
cat(sprintf("  sd    = %.6f\n", params["sd"]))
cat(sprintf("  nu    = %.6f\n", params["nu"]))
cat(sprintf("  xi    = %.6f\n", params["xi"]))
library("Ecdat")
?CPSch3
data(CPSch3)
dimnames(CPSch3)[[2]]
male.earnings = CPSch3[CPSch3[ ,3] == "male", 2]
plot(density(male.earnings), main = "untransformed")
library("fGarch")
fit = sstdFit(male.earnings, hessian = TRUE)
setwd("C:/Users/Dani/Documents/egyetem/Baruch és ETH/SIP/stats/1/chapt5")
source("DAX_fits.R")
source("DAX_TKDE.R")
source("DAX_TKDE.R")
source("DAX_TKDE.R")
source("DAX_TKDE.R")
source("DAX_TKDE.R")
source("DAX_TKDE_tdistr.R
")
source("DAX_TKDE_tdistr.R")
source("DAX_TKDE_tdistr.R")
source("DAX_TKDE_tdistr.R")
source("problem10.R")
getwd()
source("problem10.R")
View(EuStockMarkets)
source("problem10.R")
source("problem10.R")
source("problem10.R")
source("problem10.R")
source("problem10.R")
source("problem10.R")
source("problem10.R")
source("problem10.R")
source("problem10.R")
source("problem11.R")
source("problem11.R")
warnings()
source("problem11.R")
source("problem11.R")
source("problem11.R")
source("problem10.R")
source("problem11.R")
params.T
source("problem11.R")
source("problem11.R")
source("problem11.R")
source("problem12.R")
source("problem12.R")
source("problem12.R")
source("problem14.R")
source("problem14.R")
source("problem14.R")
x <- diff(log(EuStockMarkets[, "DAX"]))
n <- length(x)
m <- mean(x)
s <- sd(x)
kurt <- mean((x - m)^4) / s^4  # sample kurtosis (not excess)
kurt
n <- length(x)
n <- length(x)
se_kurt <- sqrt(24 * n * (n - 1)^2 / ((n - 3)*(n - 2)*(n + 3)*(n + 5)))
se_kurt
source("problem14.R")
library(e1071)
install.packages("e1071")
library(e1071)
source("problem14.R")
